language: c

sudo: false

matrix:
  include:
    # do one build run with our minimum dependencies
    # (or, well, at least the lowest version number that is available through
    #  anaconda..)
    - os: linux
      env: PYTHON_VERSION=2.7
    - os: linux
      env: PYTHON_VERSION=3.5
    - os: linux
      env: PYTHON_VERSION=3.6
      addons:
        apt:
          packages:
            # https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise
            - libstdc++6:i386
            - gcc-multilib
    - os: osx
      env: PYTHON_VERSION=2.7
    - os: osx
      env: PYTHON_VERSION=3.5
    - os: osx
      env: PYTHON_VERSION=3.6

# mimick travis fast fail and rolling build setup from:
# https://github.com/JuliaLang/julia/blob/master/.travis.yml
before_install:
  - if [ `uname` = "Darwin" ]; then brew update; brew install -v jq; fi
  - curl "https://raw.githubusercontent.com/JuliaLang/julia/master/contrib/travis_fastfail.sh" -o "/tmp/fastfail.sh" || echo "Failed to fetch travis_fastfail.sh"
  - if [ -f /tmp/fastfail.sh ]; then chmod u+x /tmp/fastfail.sh; /tmp/fastfail.sh || exit 1; fi

install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      export OS="MacOSX";
    else
      export OS="Linux";
    fi
  - |
      if [[ "$ARCHITECTURE_32BIT" == "True" ]]; then
        export ARCH=""
        # OPT is used by setuptools patches contained in newer numpy versions
        # used by obspy when running pip install --no-deps .
        export OPT="-m32"
        # workaround for sudo dpkg --add-architecture i386
        # be sure multiarch is the only file in this directory
        ls /etc/dpkg/dpkg.cfg.d/
        # multiarch must contain foreign-architecture i386. If not it will
        # error later and you need to do the following and add sudo: true
        #sudo sh -c "echo 'foreign-architecture i386' > /etc/dpkg/dpkg.cfg.d/multiarch"
        cat /etc/dpkg/dpkg.cfg.d/multiarch
      else
        export ARCH="_64"
      fi
  - if [[ "${PYTHON_VERSION:0:1}" == '2' ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda2-latest-${OS}-x86${ARCH}.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-${OS}-x86${ARCH}.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a
  - conda create -q -n test-environment
        python=$PYTHON_VERSION
        numpy 
        matplotlib
        basemap
        pyproj
        future
        lxml
        decorator
        sqlalchemy
        mock
        nose
        docopt
        bottleneck
        coverage
        requests
        jsonschema
        obspy
  - source activate test-environment
  # additional, optional packages that run some more tests but are not
  # available for all archs. "--no-update-dependencies" keeps other packages at
  # already installed version (ideally we should handle package versions
  # through pinning or an environment file..)
  - conda config --add channels conda-forge
  # XXX for now don't try to install other optional dependencies so that at
  # least our builds work..
  # XXX - conda install --no-update-dependencies m2crypto || true
  # XXX - conda install --no-update-dependencies cartopy || true
  # install packages not available via conda
  - pip install codecov
  - pip install geographiclib
  # current pyimgur stable release has a py3 incompatibility
  - pip install https://github.com/megies/PyImgur/archive/py3.zip
  - pip freeze
  - pip install https://github.com/obspy/obspy_github_api/archive/0.7.0.zip
  - conda list
  # done installing dependencies
  - git version
  - git fetch origin --tags --unshallow
  - git remote add obspy git://github.com/obspy/obspy.git
  - git fetch obspy --tags
  - git status
  - git branch -vv
  - git remote -vv
  - pip install --no-deps .
  - git status
  - git clone https://github.com/avuan/PyMPA37

before_script:
  - chmod +x ./pympa38.dir/pympa38mac.py

script:
   - cd ./pympa38.dir
   - travis_wait python pympa38mac.py

notifications:
    email: false
